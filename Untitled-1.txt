class Card
    include Comparable
    
    attr_accessor :suit, :rank, :rank_names 
    
    def initialize(suit, rank)
        # Create a new card
        @suit = suit
        @rank = rank
        @rank_names = {
            '1': 'Ace',
            '11': 'Jack',
            '12': 'Queen',
            '13': 'King'
        }
        
    end
    
    def face_card?
        # Is the card a face card (above 10)?
        @rank > 10
    end
    
    def <=>(other)
        @rank <=> other.rank
    end

    def to_s
        # Return human readable card
        rank = @rank_names[@rank.to_s.to_sym] || @rank.to_s]
        suit = @suit.to_s
        suit[0] = suit[0].upcase
        "#{rank} of #{suit}"
    end
end
class HighScoreTable
  attr_accessor :scores

  def initialize(max_length)
    @max_length = max_length
    @scores = []
  end
  def update(score)
    # Append the new score to the high score table
    @scores << score
    # Destructively sort then reverse to get a descending sort (i.e. highest scores first)
    @scores.sort!.reverse!
    # Destructively discard all elements except the first @max_length elements.
    @scores.slice!(@max_length, @scores.length)
  end
  def reset
    @scores = []
  end
end
  def test_shuffle
        new_deck = Deck.new
        @deck.shuffle
        assert_not_equal(new_deck.cards, @deck.cards)
    end